   1:				;*************************************************************************
   2:				; testLONGADD.ASM                                                           	*
   3:				;                                                                           	*
   4:				;    Programa teste para a instrucão LONGADD, LONGSUB, FILLBLOCK e MOVBLOCK.	*
   5:				;                                                                        	*
   6:				;    LONGADD nao FAZ PARTE DO CONJUNTO DE instrucoes do 8080/8085.       	*
   7:				;                                                                        	*
   8:				;    LONGADD é codifivada com o byte [18H].                              	*
   9:				;      Soma os numeros de C bytes apontados por HL e DE                  	*
  10:				;      e coloca o resultado a partir do endereço HL.                     	*
  11:				;      Os numeros são armazenados do byte mais significativo             	*
  12:				;      para o menos significativo. Afeta apenas CARRY.                   	*
  13:				;                                                                        	*
  14:				;    O programa assume um hardware dotado dos seguintes elementos:       	*
  15:				;                                                                        	*	
  16:				;    - Processador MP8 (8080/8085 simile);                               	*
  17:				;    - ROM de 0000H a 1FFFh;                                             	*
  18:				;    - RAM de E000h a FFFFh;                                             	*
  19:				;    - UART 8250A vista nos enderecos 08H a 0Fh;                         	*
  20:				;    - PIO de entrada vista no endereço 00h;                             	*
  21:				;    - PIO de saída vista no endereço 00h.                               	*
  22:				;                                                                        	*
  23:				;    Para compilar e "linkar" o programa, pode ser usado o assembler     	*
  24:				;    "zmac", com a linha de comando:                                     	*
  25:				;                                                                        	*
  26:				;         "zmac -8 --oo lst,hex testlongadd.asm".                       	*
  27:				;                                                                        	*
  28:				;    zmac produzirá na pasta zout o arquivo "testlongadd.hex",           	*
  29:				;    imagem do código executável a ser carregado no projeto Proteus      	*
  30:				;    e também o arquivo de listagem "testlongadd.lst".                   	*
  31:				;                                                                        	*
  32:				;*************************************************************************
  33:				
  34:				; Define origem da ROM e da RAM (este programa tem dois segmentos).
  35:				; Diretivas nao podem comecar na primeira coluna.
  36:				
  37:     -	0000          	CODIGO		EQU	0000H
  38:				
  39:     -	E000          	DADOS		EQU	0E000H
  40:				
  41:     -	FFFF          	TOPO_RAM	EQU	0FFFFH
  42:				
  43:				;*******************************************
  44:				; Definicao de macros par que zmac reconheca
  45:				; novos mnemonicos de instrucao.
  46:				;*******************************************
  47:				
  48:				FILLBLOCK	MACRO
  49:						DB	08H
  50:						ENDM	
  51:				
  52:				MOVBLOCK	MACRO
  53:						DB	10H
  54:						ENDM	
  55:				
  56:				LONGADD		MACRO
  57:						DB	18H
  58:						ENDM	
  59:				
  60:				LONGSUB		MACRO
  61:						DB	20H
  62:						ENDM	
  63:				
  64:				
  65:				LONGCMP		MACRO
  66:						DB	28H
  67:						ENDM	
  68:				
  69:				JMP256		MACRO
  70:						DB	0CBH
  71:						ENDM
  72:				
  73:				;********************
  74:				; Início do código  *
  75:				;********************
  76:				
  77:     -	0000          		ORG	CODIGO
  78:				
  79:    0+10	0000  010002  	INICIO:	 LXI	B,200H
  80:   10+10	0003  2100E5  			LXI	H,DADOS+500H
  81:   20+7	0006  3E36    			MVI	A,36H
  82:     -	0008  08      			FILLBLOCK	; Mem[HL..HL+BC]<--A
  83:				
  84:   27+10	0009  1100E5  			LXI	D,DADOS+500H
  85:   37+10	000C  210CE8  			LXI	H,DADOS+80CH
  86:     -	000F  10      			MOVBLOCK	; Mem[DE..DE+BC]<--Mem[HL..HL+BC]
  87:				;********************************************************************************************
  88:				;		AQUI COMEÇA O TESTE DOS LONGS						
  89:				;********************************************************************************************
  90:   47+10	0010  010800  			LXI	B,8
  91:   57+10	0013  114600  			LXI	D,CONSTANTE1
  92:   67+10	0016  2100E0  			LXI	H,PARCELA1
  93:     -	0019  10      			MOVBLOCK
  94:				
  95:   77+10	001A  114E00  			LXI	D,CONSTANTE2
  96:   87+10	001D  2108E0  			LXI	H,PARCELA2
  97:     -	0020  10      			MOVBLOCK
  98:				
  99:   97+10	0021  114600  			LXI	D,CONSTANTE1
 100:  107+10	0024  2114E0  			LXI	H,PARCELA3
 101:     -	0027  10      			MOVBLOCK
 102:						
 103:  117+10	0028  114E00  			LXI	D,CONSTANTE2
 104:  127+10	002B  211CE0  			LXI	H,PARCELA4
 105:     -	002E  10      			MOVBLOCK
 106:				
 107:				
 108:				; Efetua Mem[HL..HL+(C-1)]<--Mem[DE..DE+(C-1)]+Mem[HL..HL+(C-1)]
 109:     -	002F          	REP_LONG:	
 110:  137+10	002F  010800  			LXI	B,8
 111:  147+10	0032  1100E0  			LXI	D,PARCELA1
 112:  157+10	0035  2108E0  			LXI	H,PARCELA2
 113:				
 114:     -	0038  18      			LONGADD
 115:				
 116:  167+10	0039  010800  			LXI	B,8
 117:  177+10	003C  1114E0  			LXI	D,PARCELA3
 118:  187+10	003F  211CE0  			LXI	H,PARCELA4
 119:				
 120:     -	0042  20      			LONGSUB
 121:				
 122:  197+10	0043  C32F00  			JMP REP_LONG
 123:				
 124:				
 125:     -	0046  00000000	CONSTANTE1:	DB	00H,00H,00H,00H,00H,00H,00H,01H		
	              00000001
 126:     -	004E  00000000	CONSTANTE2:	DB	00H,00H,00H,00H,00H,00H,00H,00H
	              00000000
 127:				
 128:				
 129:     -	E000          		ORG	DADOS
 130:     -	E000          	PARCELA1:	DS	8
 131:     -	E008          	PARCELA2:	DS	8
 132:     -	E014          		ORG	DADOS+0014h
 133:     -	E014          	PARCELA3:	DS	8
 134:     -	E01C          	PARCELA4:	DS	8
 135:						
 136:				
 137:				
 138:     -	0000          	        END	INICIO



Statistics:

     4	passes
     0	jr promotions
    11	symbols
    86	bytes

     8	macro calls
   103	macro bytes
     0	invented symbols



Symbol Table:

CODIGO         =00        0
CONSTANTE1      46        70
CONSTANTE2      4E        78
DADOS          =E000      57344
INICIO          00        0
PARCELA1        E000      57344
PARCELA2        E008      57352
PARCELA3        E014      57364
PARCELA4        E01C      57372
REP_LONG        2F        47
TOPO_RAM       =FFFF      65535
